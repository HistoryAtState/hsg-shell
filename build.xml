<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="hsg-shell">
    <xmlproperty file="build.properties.local.xml" semanticAttributes="true" keepRoot="false"/>
    <xmlproperty file="build.properties.xml" semanticAttributes="true" keepRoot="false"/>
    <xmlproperty file="expath-pkg.xml"/>
    <property name="build.dir" value="build"/>
    <property environment="env"/>

    <!-- Allow NODE_ENV to be passed in either as an environment variable or as a regular variable -->
    <condition property="node-env-is-set-for-production" else="false">
        <or>
            <equals arg1="${env.NODE_ENV}" arg2="production"/>
            <equals arg1="${NODE_ENV}" arg2="production"/>
        </or>
    </condition>

    <!-- Create a new property that sets production mode based on whether either variation of NODE_ENV is set to production -->
    <condition property="NODE_ENV.production" value="production">
        <istrue value="${node-env-is-set-for-production}"/>
    </condition>

    <!-- Check if git file is present -->
    <available file=".git" type="dir" property="git.present"/>

    <!-- Retrieve current git HEAD hash -->
    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="repository.version" value="${git.revision}" else="unknown">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
        <echo message="git HEAD is at ${repository.version}"/>
    </target>

    <!-- Retrieve current git branch -->
    <target name="git.branch" description="Store git branch in ${repository.branch}" if="git.present">
        <exec executable="git" outputproperty="git.branch" failifexecutionfails="false" errorproperty="">
            <arg line="rev-parse --abbrev-ref HEAD"/>
        </exec>
        <echo message="Current branch: ${git.branch}"/>
    </target>

    <target name="xar" depends="git.branch,git.revision" description="main target to create application XAR file">
        <mkdir dir="${build.dir}"/>
        <echo message="Calling npm start... (Production? ${node-env-is-set-for-production})"/>
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="start"/>
            <env key="PATH" value="${env.PATH}:${node.PATH}"/>
            <env key="NODE_ENV" value="${NODE_ENV.production}"/>
        </exec>
        <echo message="${npm.output}"/>
        <echo message="Creating xar package..."/>
        <zip basedir="." destfile="${build.dir}/${app.name}-${app.version}-${git.branch}-${git.revision}.xar"
            excludes="${build.dir}/** node_modules/** package.json gulpfile.js .editorconfig .* *.properties"/>
    </target>

    <target name="clean">
        <echo message="Calling gulp clean..."/>
        <exec executable="${gulp}" outputproperty="gulp.output">
            <arg line="clean"/>
            <env key="PATH" value="${env.PATH}:${node.PATH}"/>
        </exec>
        <echo message="${gulp.output}"/>
        <echo message="Deleting xar files..."/>
        <delete>
            <fileset dir="${build.dir}">
                <include name="*.xar"/>
            </fileset>
        </delete>
    </target>
</project>
